import { Button, VerticalBox, HorizontalBox, StandardListView, Slider, LineEdit, StandardButton, ScrollView, SpinBox } from "std-widgets.slint";

import {FileSelector} from "fileselector.slint";
export {FileSelector}

export struct OverlayDrawable { id: int, x: length, y: length, data: image}
export struct LayerDrawable { id: int, x: length, y: length, data: image, m_per_px: float, transparency: float, file: string, name: string}


export enum NextAction {
    None,
    UpdateSelectedItem,
    SelectObject,
    Vertical,
    Horizontal,
    Point,
    Segment,
    Segment2,
    Line,
    Line2,
    HalfLine,
    HalfLine2,
    MeasureAngle,
    MeasureAngle2,
    Parallel,
    Parallel2,
    TwoPointsMedian,
    TwoPointsMedian2,
    Perpendicular,
    Perpendicular2,
    MeasureRadius,
    MeasurePointToLine,
    MeasurePointToLine2,
    CenterAndEdge,
    CenterAndEdge2,
    CircleThreeEdgePoints,
    CircleThreeEdgePoints2,
    CircleThreeEdgePoints3,
    MeasureTwoPoints,
    MeasureTwoPoints2,
    Tangent,
    Tangent2,
    Delete,
    FromAngle,
    FromAngle2,
    CircleRadiusLength,
}




export component AppWindow inherits Window {
    title: "Map Annotation in Rust";
    preferred-height: 1024px;
    preferred-width: 1280px;
    icon: @image-url("icons/icon_256.png");
    in-out property <NextAction> current_action: None;
    in-out property <string> contextual_text: "Welcome";
    in-out property <int> mouse_x: 42;
    in-out property <int> mouse_y: 42;
    in-out property <int> offset_x: 0;
    in-out property <int> offset_y: 0;
    in-out property <int> source_clip_when_pressed_x: 0;
    in-out property <int> source_clip_when_pressed_y: 0;
    in-out property <int> current_listview_drawable_item: -1;
    in-out property <bool> move: false;
    in-out property <float> stroke_red: 42;
    in-out property <float> stroke_green: 185;
    in-out property <float> stroke_blue: 37;
    in-out property <brush> stroke_brush: rgb(root.stroke_red, root.stroke_green, root.stroke_blue);
    in-out property <float> stroke_width: 2;
    in-out property <float> angle: 30;
    in-out property <image> map;
    in-out property <float> m_per_px: 170;
    in-out property <float> radius: 185;
    in-out property <float> viewport_zoom:1;
    in-out property <[StandardListViewItem]> item_list: [];
    in-out property <[StandardListViewItem]> layers_list: [];
    in-out property <[OverlayDrawable]> overlay_drawables: [];
    in-out property <[LayerDrawable]> layers: [];
    property <int> selected_layer;
    callback update_image();
    callback image_click();
    callback show_fileselector();
    callback show_fileselector_bg();
    callback load();
    callback save();
    callback close();
    VerticalBox {
        height: 100%;
        menubar := Rectangle {
            height: 30px;
            background: grey;
            border-width: 0px;
            HorizontalBox {
                alignment: LayoutAlignment.start;
                file_button := Text {
                    text: "File";
                    TouchArea {
                        clicked => {
                            file-menu.show();
                        }
                    }
                }

                Text {
                    text: "About";
                    TouchArea {
                        clicked => {
                            about.show();
                        }
                    }
                }
            }
        }

        HorizontalBox {
            vertical-stretch: 1;
            preferred-height: 100%;
            VerticalBox {
                vertical-stretch: 0;
                width: 180px;
                // Left menu bar
                select := Button {
                    text: "Select object";
                    clicked => {
                        root.contextual_text = "Click on an object to get information";
                        root.current_action = NextAction.SelectObject;
                    }
                }

                point := Button {
                    text: "Point";
                    clicked => {
                        root.contextual_text = "Click on a point to draw a point";
                        root.current_action = NextAction.Point;
                    }
                }

                Rectangle {
                    width: point.width;
                    height: 1px;
                    background: white;
                }

                Text {
                    text: "Circles";
                }

                Button {
                    text: "Radius length";
                    clicked => {
                        root.contextual_text = "Enter circle radius in popup";
                        radius-popup.show();
                    }
                }

                Button {
                    text: "Center and edge";
                    clicked => {
                        root.contextual_text = "Click on the circle center";
                        root.current_action = NextAction.CenterAndEdge;
                    }
                }

                Button {
                    text: "Three edge points";
                    clicked => {
                        root.contextual_text = "Click on the first point";
                        root.current_action = NextAction.CircleThreeEdgePoints;
                    }
                }

                Rectangle {
                    width: point.width;
                    height: 1px;
                    background: white;
                }

                Text {
                    text: "Lines";
                }

                Button {
                    // Segment
                    text: "Segment";
                    icon: @image-url("icons/diagonal_line_32dp_E8EAED_FILL0_wght400_GRAD0_opsz40.png");
                    clicked => {
                        root.contextual_text = "Click on the first segment point";
                        root.current_action = NextAction.Segment;
                    }
                }

                Button {
                    text: "Line";
                    clicked => {
                        root.contextual_text = "Click on the first line point";
                        root.current_action = NextAction.Line;
                    }
                }

                Button {
                    text: "Half line";
                    clicked => {
                        root.contextual_text = "Click on the end point";
                        root.current_action = NextAction.HalfLine;
                    }
                }

                Button {
                    text: "Two points median";
                    clicked => {
                        root.contextual_text = "Click on the first point";
                        root.current_action = NextAction.TwoPointsMedian;
                    }
                }

                Button {
                    text: "Perpendicular";
                    clicked => {
                        root.contextual_text = "Click on a point the perpendicular line goes through";
                        root.current_action = NextAction.Perpendicular;
                    }
                }

                Button {
                    text: "Parallel";
                    clicked => {
                        root.contextual_text = "Click on a point the parallel line goes through";
                        root.current_action = NextAction.Parallel;
                    }
                }

                Button {
                    text: "Vertical";
                    clicked => {
                        root.contextual_text = "Click on a point to draw a vertical line";
                        root.current_action = NextAction.Vertical;
                    }
                }

                Button {
                    text: "Horizontal";
                    clicked => {
                        root.contextual_text = "Click on a point to draw an horizontal line";
                        root.current_action = NextAction.Horizontal;
                    }
                }

                Button {
                    text: "Tangent";
                    clicked => {
                        root.contextual_text = "Click on a point the tangents will go through";
                        root.current_action = NextAction.Tangent;
                    }
                }

                Button {
                    text: "From angle";
                    clicked => {
                        root.contextual_text = "Enter angle value in popup";
                        angle-popup.show();
                    }
                }

                Rectangle {
                    width: point.width;
                    height: 1px;
                    background: white;
                }

                Text {
                    text: "Measurements";
                }

                Button {
                    text: "Two points";
                    clicked => {
                        root.contextual_text = "Click on the first point";
                        root.current_action = NextAction.MeasureTwoPoints;
                    }
                }

                Button {
                    text: "Point to line";
                    clicked => {
                        root.contextual_text = "Click on the point";
                        root.current_action = NextAction.MeasurePointToLine;
                    }
                }

                Button {
                    text: "Angle";
                    clicked => {
                        root.contextual_text = "Click on the first line";
                        root.current_action = NextAction.MeasureAngle;
                    }
                }

                Button {
                    text: "Radius";
                    clicked => {
                        root.contextual_text = "Click on a circle";
                        root.current_action = NextAction.MeasureRadius;
                    }
                }

                Button {
                    text: "Define m/px";
                    clicked => {
                        m_per_px_popup.show();
                    }
                }

                Rectangle {
                    width: point.width;
                    height: 1px;
                    background: white;
                }

                Text {
                    text: "Divers";
                }

                Button {
                    // Color palette
                    text: "Palette";
                    icon: @image-url("icons/palette_32dp_E8EAED_FILL0_wght400_GRAD0_opsz40.png");
                    clicked => {
                        color_popup.show();
                    }
                }

                Button {
                    // Delete
                    text: "Delete";
                    icon: @image-url("icons/delete_forever_32dp_E8EAED_FILL0_wght400_GRAD0_opsz40.png");
                    clicked => {
                        root.contextual_text = "Click on the item to delete";
                        root.current_action = NextAction.Delete;
                    }
                }
            }

            Rectangle {
                width: 1px;
                background: white;
            }

            scroll := ScrollView {
                viewport-width: canva.width;
                viewport-height: canva.height;
                canva := Image {
                    source: map;
                    width: map.width * 1px;
                    height: map.height * 1px;
                    horizontal-tiling: ImageTiling.none;
                    vertical-tiling: ImageTiling.none;
                    for layer in root.layers: Image {
                        source: layer.data;
                        x: layer.x / root.viewport_zoom;
                        y: layer.y / root.viewport_zoom;
                        width: layer.data.width * 1px / root.viewport_zoom * (layer.m_per_px / root.m_per_px);
                        height: layer.data.height * 1px / root.viewport_zoom * (layer.m_per_px / root.m_per_px);
                        opacity: layer.transparency;
                    }
                    for drawable in root.overlay_drawables: Image {
                        source: drawable.data;
                        x: drawable.x / root.viewport_zoom;
                        y: drawable.y / root.viewport_zoom;
                        width: drawable.data.width * 1px / root.viewport_zoom;
                        height: drawable.data.height * 1px / root.viewport_zoom;
                    }
                    area := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            root.mouse_x = parent.source-clip-x + (parent.source-clip-width * (self.pressed-x / 1px) / (parent.width / 1px));
                            root.mouse_y = parent.source-clip-y + (parent.source-clip-height * (self.pressed-y / 1px) / (parent.height / 1px));
                            root.image_click();
                        }
                        scroll-event(event) => {
                            if ! event.modifiers.control {
                                return EventResult.reject;
                            }
                            if event.delta-y > 0 {
                                parent.width = min(parent.width * 1.1, map.width * 1px);
                                parent.height = min(parent.height * 1.1, map.height * 1px);
                            } else {
                                parent.width = max(parent.width / 1.1, scroll.visible-width);
                                parent.height = max(parent.height / 1.1, scroll.visible-height);
                            }
                            root.viewport_zoom = map.width * 1px / parent.width;
                            root.update_image();
                            return EventResult.accept;
                        }
                    }
                }
            }

            Rectangle {
                width: 1px;
                background: white;
            }

            drawable_list := StandardListView {
                // Right menu bar
                width: 150px;
                model: item_list;
                current-item: root.current_listview_drawable_item;
                current-item-changed(value) => {
                    root.current_listview_drawable_item = value;
                    root.current_action = NextAction.UpdateSelectedItem;
                    root.image_click();
                }
            }

            Rectangle {
                width: 1px;
                background: white;
            }

            VerticalBox {
                width: 150px;
                // Test import
                load_bg := Button {
                    text: "Load background";
                    clicked => {
                        root.show_fileselector_bg();
                    }
                }

                Text {
                    text: "Meters per pixel";
                }

                SpinBox {
                    minimum: 1;
                    maximum: 1000;
                    value: root.m_per_px;
                    edited(value) => {
                        root.m_per_px = value;
                    }
                }

                Rectangle {
                    width: 150px;
                    height: 1px;
                    background: white;
                }

                // Test import
                import := Button {
                    text: "Add layer";
                    clicked => {
                        root.show_fileselector();
                    }
                }

                layer_list := StandardListView {
                    width: 150px;
                    // Right menu bar
                    model: layers_list;
                    current-item: root.selected_layer;
                    current-item-changed(value) => {
                        debug(value);
                        root.selected_layer = value;
                    }
                }

                Rectangle {
                    width: 150px;
                    height: 1px;
                    background: white;
                }

                Text {
                    text: "Position";
                }

                HorizontalBox {
                    Text {
                        text: "X:";
                    }

                    SpinBox {
                        width: 100px;
                        maximum: map.width;
                        value: root.layers[root.selected_layer].x / 1px;
                        edited(value) => {
                            root.layers[root.selected_layer].x = value * 1px;
                        }
                    }
                }

                Slider {
                    minimum: 0;
                    maximum: map.width;
                    value: root.layers[root.selected_layer].x / 1px;
                    changed(value) => {
                        root.layers[root.selected_layer].x = value * 1px;
                    }
                }

                HorizontalBox {
                    Text {
                        text: "Y:";
                    }

                    SpinBox {
                        width: 100px;
                        maximum: map.width;
                        value: root.layers[root.selected_layer].y / 1px;
                        edited(value) => {
                            root.layers[root.selected_layer].y = value * 1px;
                        }
                    }
                }

                Slider {
                    minimum: 0;
                    maximum: map.height;
                    value: root.layers[root.selected_layer].y / 1px;
                    changed(value) => {
                        root.layers[root.selected_layer].y = value * 1px;
                    }
                }

                Text {
                    text: "Transparency";
                }

                Slider {
                    minimum: 0;
                    maximum: 1;
                    value: root.layers[root.selected_layer].transparency;
                    changed(value) => {
                        root.layers[root.selected_layer].transparency = value;
                    }
                }

                Text {
                    text: "Meters per pixel";
                }

                SpinBox {
                    minimum: 1;
                    maximum: 1000;
                    value: root.layers[root.selected_layer].m_per_px;
                    edited(value) => {
                        root.layers[root.selected_layer].m_per_px = value;
                    }
                }
            }
        }

        Rectangle {
            vertical-stretch: 0;
            width: 100%;
            height: 1px;
            background: white;
        }

        Text {
            vertical-stretch: 0;
            height: 40px;
            text: contextual_text;
        }
    }

    angle_popup := PopupWindow {
        width: 250px;
        height: 150px;
        x: root.width / 2 - self.width / 2;
        y: root.height / 2 - self.height / 2;
        close-on-click: false;
        Rectangle {
            width: parent.width;
            height: parent.height;
            background: grey;
            border_radius: 3px;
            border_width: 1px;
            border_color: black;
            clip: true;
        }

        VerticalBox {
            HorizontalBox {
                alignment: LayoutAlignment.center;
                Text {
                    width: 40px;
                    text: "Angle: ";
                }

                LineEdit {
                    width: 40px;
                    text: root.angle;
                    input-type: InputType.decimal;
                    edited(value) => {
                        root.angle = value.to-float();
                    }
                }

                Text {
                    width: 20px;
                    text: "°";
                }
            }

            HorizontalBox {
                StandardButton {
                    kind: ok;
                    clicked => {
                        root.contextual_text = "Click on a point the lines will go through";
                        root.current_action = NextAction.FromAngle;
                        angle_popup.close();
                    }
                }
            }
        }
    }

    m_per_px_popup := PopupWindow {
        width: 250px;
        height: 150px;
        x: root.width / 2 - self.width / 2;
        y: root.height / 2 - self.height / 2;
        close-on-click: false;
        Rectangle {
            width: parent.width;
            height: parent.height;
            background: grey;
            border_radius: 3px;
            border_width: 1px;
            border_color: black;
            clip: true;
        }

        VerticalBox {
            HorizontalBox {
                alignment: LayoutAlignment.center;
                Text {
                    width: 40px;
                    text: "Ratio: ";
                }

                LineEdit {
                    width: 40px;
                    text: root.m_per_px;
                    input-type: InputType.decimal;
                    edited(value) => {
                        root.m_per_px = value.to-float();
                    }
                }

                Text {
                    width: 20px;
                    text: "meters per pixel";
                }
            }

            HorizontalBox {
                StandardButton {
                    kind: ok;
                    clicked => {
                        m_per_px_popup.close();
                    }
                }
            }
        }
    }

    radius_popup := PopupWindow {
        width: 250px;
        height: 150px;
        x: root.width / 2 - self.width / 2;
        y: root.height / 2 - self.height / 2;
        close-on-click: false;
        Rectangle {
            width: parent.width;
            height: parent.height;
            background: grey;
            border_radius: 3px;
            border_width: 1px;
            border_color: black;
            clip: true;
        }

        VerticalBox {
            HorizontalBox {
                alignment: LayoutAlignment.center;
                Text {
                    width: 40px;
                    text: "Radius: ";
                }

                LineEdit {
                    width: 40px;
                    text: root.radius;
                    input-type: InputType.decimal;
                    edited(value) => {
                        root.radius = value.to-float();
                    }
                }

                Text {
                    width: 20px;
                    text: "km";
                }
            }

            HorizontalBox {
                StandardButton {
                    kind: ok;
                    clicked => {
                        root.contextual_text = "Click on the circle center";
                        root.current_action = NextAction.CircleRadiusLength;
                        radius_popup.close();
                    }
                }
            }
        }
    }

    color_popup := PopupWindow {
        width: 250px;
        height: 150px;
        x: root.width / 2 - self.width / 2;
        y: root.height / 2 - self.height / 2;
        close-on-click: false;
        Rectangle {
            width: parent.width;
            height: parent.height;
            background: grey;
            border_radius: 3px;
            border_width: 1px;
            border_color: black;
            clip: true;
        }

        VerticalBox {
            HorizontalBox {
                GridLayout {
                    spacing: 5px;
                    Row {
                        Text {
                            width: 40px;
                            text: "Red";
                        }

                        Slider {
                            minimum: 0;
                            maximum: 255;
                            width: 150px;
                            value: root.stroke_red;
                            changed(value) => {
                                root.stroke_red = value;
                            }
                        }
                    }

                    Row {
                        Text {
                            width: 40px;
                            text: "Green";
                        }

                        Slider {
                            minimum: 0;
                            maximum: 255;
                            width: 150px;
                            value: root.stroke_green;
                            changed(value) => {
                                root.stroke_green = value;
                            }
                        }
                    }

                    Row {
                        Text {
                            width: 40px;
                            text: "Blue";
                        }

                        Slider {
                            minimum: 0;
                            maximum: 255;
                            width: 150px;
                            value: root.stroke_blue;
                            changed(value) => {
                                root.stroke_blue = value;
                            }
                        }
                    }
                }

                color_display := Rectangle {
                    width: 50px;
                    height: 50px;
                    background: root.stroke_brush;
                }
            }

            HorizontalBox {
                Text {
                    width: 40px;
                    text: "Width";
                }

                LineEdit {
                    width: 40px;
                    text: root.stroke_width;
                    input-type: InputType.decimal;
                    edited(value) => {
                        root.stroke_width = value.to-float();
                    }
                }

                Text {
                    width: 20px;
                    text: "px";
                }
            }

            HorizontalBox {
                StandardButton {
                    kind: ok;
                    clicked => {
                        color_popup.close();
                    }
                }
            }
        }
    }

    file_menu := PopupWindow {
        x: file_button.x;
        y: menubar.y + menubar.height;
        Rectangle {
            background: grey;
            VerticalBox {
                Text {
                    width: 200px;
                    height: 25px;
                    text: "Open";
                }

                Text {
                    width: 200px;
                    height: 25px;
                    text: "Save";
                }

                Rectangle {
                    height: 1px;
                    background: lightgrey;
                }

                Text {
                    text: "Close";
                    width: 200px;
                    height: 25px;
                    TouchArea {
                        clicked => {
                            root.close();
                        }
                    }
                }
            }
        }
    }

    about := PopupWindow {
        x: (root.width - 200px) / 2;
        y: (root.height - 150px) / 2;
        Rectangle {
            width: 350px;
            height: 200px;
            background: grey;
            VerticalLayout {
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;
                    Image {
                        source: @image-url("icons/icon_256.png");
                        width: 128px;
                        height: 128px;
                    }

                    VerticalLayout {
                        alignment: center;
                    Text {
                        text: "Map Annotation in Rust\n\nVersion 0.1.0 alpha";
                    }}
                }
            }
        }
    }
}
